{"version":3,"sources":["js/scripts.js"],"names":["audioContext","unlocked","isPlaying","startTime","current16thNote","tempo","lookahead","scheduleAheadTime","nextNoteTime","noteResolution","noteLength","canvas","canvasContext","last16thNoteDrawn","notesInQueue","timerWorker","samplesBuffer","BufferLoader","context","urlList","callback","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","alert","length","error","console","onerror","send","load","i","nextNote","secondsPerBeat","scheduleNote","beatNumber","time","log","push","note","kick","snare","hihat","hihat2","cymbal","includes","playSound","scheduler","currentTime","play","createBuffer","node","createBufferSource","start","postMessage","init","AudioContext","bufferLoader","finishedLoading","Worker","onmessage","e","data","source","connect","destination","noteOn","window","addEventListener","playAnchor","document","querySelector"],"mappings":"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","file":"scripts.cd665a19.map","sourceRoot":"..","sourcesContent":["var audioContext = null;\nvar unlocked = false;\nvar isPlaying = false;      // Are we currently playing?\nvar startTime;              // The start time of the entire sequence.\nvar current16thNote;        // What note is currently last scheduled?\nvar tempo = 120;          // tempo (in beats per minute)\nvar lookahead = 25.0;       // How frequently to call scheduling function \n                            //(in milliseconds)\nvar scheduleAheadTime = 0.1;    // How far ahead to schedule audio (sec)\n                            // This is calculated from lookahead, and overlaps \n                            // with next interval (in case the timer is late)\nvar nextNoteTime = 0.0;     // when the next note is due.\nvar noteResolution = 0;     // 0 == 16th, 1 == 8th, 2 == quarter note\nvar noteLength = 0.05;      // length of \"beep\" (in seconds)\nvar canvas,                 // the canvas element\n    canvasContext;          // canvasContext is the canvas' context 2D\nvar last16thNoteDrawn = -1; // the last \"box\" we drew on the screen\nvar notesInQueue = [];      // the notes that have been put into the web audio,\n                            // and may or may not have played yet. {note, time}\nvar timerWorker = null;     // The Web Worker used to fire timer messages\nvar samplesBuffer = null;\n\n\n\nfunction BufferLoader(context, urlList, callback) {\n    this.context = audioContext;\n    this.urlList = urlList;\n    this.onload = callback;\n    this.bufferList = new Array();\n    this.loadCount = 0;\n  }\n  \n  BufferLoader.prototype.loadBuffer = function(url, index) {\n    // Load buffer asynchronously\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n  \n    var loader = this;\n  \n    request.onload = function() {\n      // Asynchronously decode the audio file data in request.response\n      loader.context.decodeAudioData(\n        request.response,\n        function(buffer) {\n          if (!buffer) {\n            alert('error decoding file data: ' + url);\n            return;\n          }\n          loader.bufferList[index] = buffer;\n          if (++loader.loadCount == loader.urlList.length)\n            loader.onload(loader.bufferList);\n        },\n        function(error) {\n          console.error('decodeAudioData error', error);\n        }\n      );\n    }\n  \n    request.onerror = function() {\n      alert('BufferLoader: XHR error');\n    }\n  \n    request.send();\n  }\n  \n  BufferLoader.prototype.load = function() {\n    for (var i = 0; i < this.urlList.length; ++i)\n    this.loadBuffer(this.urlList[i], i);\n  }\n\n\n\n\n\n\n\n\n\n\nfunction nextNote() {\n    // Advance current note and time by a 16th note...\n    var secondsPerBeat = 60.0 / tempo;    // Notice this picks up the CURRENT \n                                          // tempo value to calculate beat length.\n    nextNoteTime += 0.25 * secondsPerBeat;    // Add beat length to last beat time\n\n    current16thNote++;    // Advance the beat number, wrap to zero\n    if (current16thNote == 32) {\n        current16thNote = 0;\n    }\n}\n\nfunction scheduleNote( beatNumber, time ) {\n\n    console.log(beatNumber);\n\n    // push the note on the queue, even if we're not playing.\n    notesInQueue.push( { note: beatNumber, time: time } );\n\n    if ( (noteResolution==1) && (beatNumber%2))\n        return; // we're not playing non-8th 16th notes\n    if ( (noteResolution==2) && (beatNumber%4))\n        return; // we're not playing non-quarter 8th notes\n\n    // create an oscillator\n    // var osc = audioContext.createOscillator();\n    // osc.connect( audioContext.destination );\n    // if (beatNumber % 16 === 0)    // beat 0 == high pitch\n    //     osc.frequency.value = 880.0;\n    // else if (beatNumber % 4 === 0 )    // quarter notes = medium pitch\n    //     osc.frequency.value = 440.0;\n    // else                        // other 16th notes = low pitch\n    //     osc.frequency.value = 220.0;\n\n    // console.log(time);\n\n    // osc.start( time );\n    // osc.stop( time + noteLength );\n\n    const kick = samplesBuffer[0];\n    const snare = samplesBuffer[1];\n    const hihat = samplesBuffer[2];\n    const hihat2 = samplesBuffer[3];\n    const cymbal = samplesBuffer[4];\n\n    if ([0,8,16,24].includes(beatNumber)) playSound(kick, time);\n    if ([4,12,20,28].includes(beatNumber)) playSound(snare, time);\n    if ([0,6,12,20,24,26,28].includes(beatNumber)) playSound(hihat, time);\n    if ([2,10,16,26].includes(beatNumber)) playSound(hihat2, time);\n    if ([0,26].includes(beatNumber)) playSound(cymbal, time);\n}\n\nfunction scheduler() {\n    // while there are notes that will need to play before the next interval, \n    // schedule them and advance the pointer.\n    while (nextNoteTime < audioContext.currentTime + scheduleAheadTime ) {\n        scheduleNote( current16thNote, nextNoteTime );\n        nextNote();\n    }\n}\n\n\n\nfunction play() {\n    if (!unlocked) {\n      // play silent buffer to unlock the audio\n      var buffer = audioContext.createBuffer(1, 1, 22050);\n      var node = audioContext.createBufferSource();\n      node.buffer = buffer;\n      node.start(0);\n      unlocked = true;\n    }\n\n    isPlaying = !isPlaying;\n\n    if (isPlaying) { // start playing\n        current16thNote = 0;\n        nextNoteTime = audioContext.currentTime;\n        timerWorker.postMessage(\"start\");\n        return \"stop\";\n    } else {\n        timerWorker.postMessage(\"stop\");\n        return \"play\";\n    }\n}\n\nfunction init(){\n\n    // NOTE: THIS RELIES ON THE MONKEYPATCH LIBRARY BEING LOADED FROM\n    // Http://cwilso.github.io/AudioContext-MonkeyPatch/AudioContextMonkeyPatch.js\n    // TO WORK ON CURRENT CHROME!!  But this means our code can be properly\n    // spec-compliant, and work on Chrome, Safari and Firefox.\n\n    audioContext = new AudioContext();\n\n    // if we wanted to load audio files, etc., this is where we should do it.\n    bufferLoader = new BufferLoader(\n        audioContext,\n        [\n          '/kick.wav',\n          '/snare.wav',\n          '/hihat.wav',\n          '/hihat2.wav',\n          '/cy.wav'\n        ],\n        finishedLoading\n        );\n    \n      bufferLoader.load();\n\n\n    timerWorker = new Worker(\"metronomeworker.js\");\n\n    timerWorker.onmessage = function(e) {\n        if (e.data == \"tick\") {\n            //console.log(\"tick!\");\n            scheduler();\n        }\n        else\n            console.log(\"message: \" + e.data);\n    };\n    timerWorker.postMessage({\"interval\":lookahead});\n}\n\nfunction finishedLoading(bufferList){\n    samplesBuffer = bufferList;\n}\n\nfunction playSound(buffer, time) {\n    var source = audioContext.createBufferSource();\n    source.buffer = buffer;\n    source.connect(audioContext.destination);\n    if (!source.start)\n      source.start = source.noteOn;\n    source.start(time);\n  }\n\nwindow.addEventListener(\"load\", init );\n\nconst playAnchor = document.querySelector('.play');\nplayAnchor.addEventListener('click', play);"]}